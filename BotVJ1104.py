from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
import time
import requests
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import os
import re




CONFIG = {
    'SCOPES': ['https://www.googleapis.com/auth/spreadsheets'],
    'SERVICE_ACCOUNT_FILE': 'keysheet.json',  # File credentials c·ªßa b·∫°n
    'SPREADSHEET_ID': '1RyL5_rm7wFyR6VPpOl2WrsgFjbz2m1cNtATXR7DK190',
    'TELEGRAM_BOT_TOKEN': '7359295123:AAGz0rHge3L5gM-XJmyzNq6sayULdHO4-qE',
    'TELEGRAM_CHAT_ID': str(-4622194613),  # room tele ch√≠nh
    'usernameVJ' : 'KR242012A18KXM',
    'passwordVJ' : 'Grgnbd@34562312'
}
#test id
CONFIGTEST = {
    'SCOPES': ['https://www.googleapis.com/auth/spreadsheets'],
    'SERVICE_ACCOUNT_FILE': 'keytest.json',  # File credentials c·ªßa b·∫°n
    'SPREADSHEET_ID': '1OwKfz3bhJKai2ph6Fc8GOeN087hBU1jPY9dm02ZisQo',
    'TELEGRAM_BOT_TOKEN': '7359295123:AAGz0rHge3L5gM-XJmyzNq6sayULdHO4-qE',
    'TELEGRAM_CHAT_ID': str(-4698930772),  # room test
    'usernameVJ' : 'KR242009A18KXM',
    'passwordVJ' : 'Glvav@31613017'
    
}
#CONFIG=CONFIGTEST


TELEGRAM_BOT_TOKEN= CONFIG['TELEGRAM_BOT_TOKEN']
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'



# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u driver
driver = None
username = CONFIG["usernameVJ"]
password = CONFIG["passwordVJ"]
# üóÇÔ∏è File config
CONFIG_GIA_FILE = "config_gia.json"

# üîß Gi√° m·∫∑c ƒë·ªãnh
DEFAULT_CONFIG_GIA = {
    "HANH_LY_DELUXE": 2000,
    "HANH_LY_ECO": 40000,
    "PHI_XUAT_VE_2_CHIEU": 15000,
    "PHI_XUAT_VE_1CH_DELUXE": 40000,
    "PHI_XUAT_VE_1CH_ECO": 32000
}

# üì¶ Load c·∫•u h√¨nh gi√°
def load_config_gia():
    if os.path.exists(CONFIG_GIA_FILE):
        try:
            with open(CONFIG_GIA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                config_loaded = {
                    "PHI_XUAT_VE_2_CHIEU": int(data.get("PHI_XUAT_VE_2_CHIEU", DEFAULT_CONFIG_GIA["PHI_XUAT_VE_2_CHIEU"])),
                    "HANH_LY_DELUXE": int(data.get("HANH_LY_DELUXE", DEFAULT_CONFIG_GIA["HANH_LY_DELUXE"])),
                    "HANH_LY_ECO": int(data.get("HANH_LY_ECO", DEFAULT_CONFIG_GIA["HANH_LY_ECO"])),
                    "PHI_XUAT_VE_1CH_DELUXE": int(data.get("PHI_XUAT_VE_1CH_DELUXE", DEFAULT_CONFIG_GIA["PHI_XUAT_VE_1CH_DELUXE"])),
                    "PHI_XUAT_VE_1CH_ECO": int(data.get("PHI_XUAT_VE_1CH_ECO", DEFAULT_CONFIG_GIA["PHI_XUAT_VE_1CH_ECO"])),
                }

                # üñ®Ô∏è In ra log
                print("üì• ƒê√£ load c·∫•u h√¨nh gi√° t·ª´ file:")
                for key, value in config_loaded.items():
                    print(f"  - {key}: {value:,}ƒë")

                input("‚è∏Ô∏è ·∫§n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                return config_loaded
        except Exception as e:
            print("‚ùå L·ªói khi ƒë·ªçc config_gia.json:", e)

    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ho·∫∑c l·ªói file config_gia.json, d√πng m·∫∑c ƒë·ªãnh:")
    for key, value in DEFAULT_CONFIG_GIA.items():
        print(f"  - {key}: {value:,}ƒë")

    input("‚è∏Ô∏è ·∫§n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    return DEFAULT_CONFIG_GIA.copy()

# üíæ L∆∞u config
def save_config_gia(config):
    with open(CONFIG_GIA_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4)
    print("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh gi√° m·ªõi!")

# üì≤ Nh·∫≠p th·ªß c√¥ng
def update_config_gia(config):
    print("\nüéõÔ∏è C·∫•u h√¨nh gi√° hi·ªán t·∫°i:")
    for key, val in config.items():
        print(f"- {key}: {val}")

    print("\nüí¨ Nh·∫≠p gi√° m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n):")

    for key in config:
        val = input(f"{key} [{config[key]}]: ").strip()
        if val:
            try:
                config[key] = int(val)
            except ValueError:
                print("‚ö†Ô∏è Kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n.")

    return config
CONFIG_GIA = load_config_gia()
# CONFIG_GIA = update_config_gia(CONFIG_GIA)
# save_config_gia(CONFIG_GIA)
def setup_chrome_driver():
    """
    Thi·∫øt l·∫≠p v√† kh·ªüi ƒë·ªông ChromeDriver
    :return: ƒê·ªëi t∆∞·ª£ng WebDriver
    """
    try:
        # Thi·∫øt l·∫≠p options cho Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Ch·∫°y ·∫©n (b·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n)
        
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Kh·ªüi t·∫°o service v√† driver
        
        driver = webdriver.Chrome(options=chrome_options)
        
        print("ƒê√£ kh·ªüi ƒë·ªông ChromeDriver th√†nh c√¥ng")
        return driver
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông ChromeDriver: {str(e)}")
        return None

def close_chrome_driver():
    """
    ƒê√≥ng ChromeDriver
    """
    global driver
    if driver:
        try:
            driver.quit()
            print("ƒê√£ ƒë√≥ng ChromeDriver")
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng ChromeDriver: {str(e)}")
        finally:
            driver = None
def cut_year(date_str: str, simple: bool = False) -> str:
    """
    C·∫Øt ph·∫ßn nƒÉm kh·ªèi chu·ªói ng√†y:
    - simple=False: 'HH:MM ng√†y DD/MM/YYYY' ‚Üí 'HH:MM ng√†y DD/MM'
    - simple=True:
        + 'YYYY/MM/DD' ‚Üí 'DD/MM'
        + 'MM/DD/YYYY' ‚Üí 'DD/MM' (ki·ªÉu M·ªπ)
    """
    try:
        if simple:
            try:
                # Format ISO: YYYY/MM/DD
                dt = datetime.strptime(date_str, "%Y/%m/%d")
                return dt.strftime("%d/%m")
            except ValueError:
                # Format US: MM/DD/YYYY
                dt = datetime.strptime(date_str, "%m/%d/%Y")
                return dt.strftime("%d/%m")
        else:
            # Format ƒë·∫ßy ƒë·ªß: HH:MM ng√†y DD/MM/YYYY
            dt = datetime.strptime(date_str, "%H:%M ng√†y %d/%m/%Y")
            return dt.strftime("%H:%M ng√†y %d/%m")
    except ValueError:
        print(f"‚ùå Format sai: {date_str}")
        return date_str
def cat_time(text: str) -> str:
    """
    Chuy·ªÉn 'HH:MM, DD/MM/YYYY' ‚Üí 'HH:MM ng√†y DD/MM'
    """
    try:
        dt = datetime.strptime(text, "%H:%M, %d/%m/%Y")
        return dt.strftime("%H:%M ng√†y %d/%m")
    except ValueError:
        print(f"‚ùå Format kh√¥ng ƒë√∫ng nhen ƒë·∫°i ca: {text}")
        return text
def to_value(currency_str: str) -> int:
    """
    Nh·∫≠n chu·ªói ki·ªÉu '138,300 KRW' => tr·∫£ v·ªÅ s·ªë nguy√™n 138300
    """
    try:
        clean_str = ''.join(c for c in currency_str if c.isdigit())
        return int(clean_str)
    except:
        print(f"‚ùå Kh√¥ng parse ƒë∆∞·ª£c: {currency_str}")
        return 0
def giacuoi(*loai_ve):
    loai_ve = [ve.upper() for ve in loai_ve]
    so_ve = len(loai_ve)
    tong = 0

    # T√≠nh ph√≠ h√†nh l√Ω
    for ve in loai_ve:
        if ve == "DELUXE":
            tong += CONFIG_GIA["HANH_LY_DELUXE"]
        elif ve == "ECO":
            tong += CONFIG_GIA["HANH_LY_ECO"]
        else:
            print(f"‚ùå Lo·∫°i v√© kh√¥ng h·ª£p l·ªá: {ve}")
            return 0

    # T√≠nh ph√≠ xu·∫•t v√©
    if so_ve == 2:
        tong += CONFIG_GIA["PHI_XUAT_VE_2_CHIEU"]
    elif so_ve == 1:
        if loai_ve[0] == "DELUXE":
            tong += CONFIG_GIA["PHI_XUAT_VE_1CH_DELUXE"]
        elif loai_ve[0] == "ECO":
            tong += CONFIG_GIA["PHI_XUAT_VE_1CH_ECO"]
    else:
        print("‚ùå S·ªë l∆∞·ª£ng v√© kh√¥ng h·ª£p l·ªá:", so_ve)
        return 0

    return tong

def to_price(amount: int, currency: str = "KRW", round_to: int = 100) -> str:
    """
    Chuy·ªÉn s·ªë nguy√™n th√†nh chu·ªói ki·ªÉu '1,138,300 KRW'
    L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t round_to (m·∫∑c ƒë·ªãnh 100)
    """
    try:
        # L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t 'round_to'
        rounded = round(amount / round_to) * round_to
        formatted = f"{rounded:,}"
        return f"{formatted} {currency}"
    except:
        print(f"‚ùå Kh√¥ng convert ƒë∆∞·ª£c: {amount}")
        return str(amount)

def send_telegram_message(message, image_paths=None):
    """
    G·ª≠i tin nh·∫Øn l√™n Telegram
    :param message: N·ªôi dung tin nh·∫Øn
    :param image_paths: List ƒë∆∞·ªùng d·∫´n ƒë·∫øn c√°c file ·∫£nh (n·∫øu c√≥)
    :return: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    TELEGRAM_CHAT_ID = CONFIG['TELEGRAM_CHAT_ID']
    try:
        if image_paths and len(image_paths) > 0:
            media = []
            files = {}

            for idx, image_path in enumerate(image_paths):
                file_key = f'photo{idx}'
                files[file_key] = open(image_path, 'rb')
                media.append({
                    'type': 'photo',
                    'media': f'attach://{file_key}',
                    'caption': message if idx == 0 else "",  # ‚ö†Ô∏è fix l·ªói ·ªü ƒë√¢y
                    'parse_mode': 'HTML'
                })

            payload = {
                'chat_id': TELEGRAM_CHAT_ID,
                'media': json.dumps(media)
            }

            response = requests.post(
                f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMediaGroup',
                data=payload,
                files=files
            )
        else:
            # Ch·ªâ g·ª≠i tin nh·∫Øn
            payload = {
                'chat_id': TELEGRAM_CHAT_ID,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(TELEGRAM_API_URL, json=payload)

        if response.status_code == 200:
            return True
        else:
            print(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {response.text}")
            return False
    except Exception as e:
        print(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {str(e)}")
        return False

def get_google_sheets_service():
    try:
        SCOPES = CONFIG['SCOPES']
        SERVICE_ACCOUNT_FILE = CONFIG['SERVICE_ACCOUNT_FILE']
        # ƒê·ªçc credentials t·ª´ file JSON
        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        
        # T·∫°o service
        service = build('sheets', 'v4', credentials=credentials)
        return service
    except Exception as e:
        print(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Sheets: {str(e)}")
        return None

def read_sheet(spreadsheet_id, range_name):
    """
    ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn ƒë·ªçc (v√≠ d·ª•: 'Sheet1!A1:D10')
    :return: D·ªØ li·ªáu t·ª´ sheet
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            result = sheet.values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            values = result.get('values', [])
            
            return values
        return None
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None
def get_sheet_id(spreadsheet_id, sheet_name):
    """
    L·∫•y sheetId c·ªßa m·ªôt sheet trong b·∫£ng t√≠nh.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param sheet_name: T√™n sheet (v√≠ d·ª•: 'H√†ng Ch·ªù')
    :return: sheetId n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y metadata c·ªßa b·∫£ng t√≠nh
            sheet_metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
            sheets = sheet_metadata.get('sheets', [])
            
            # T√¨m sheetId t·ª´ t√™n sheet
            for sheet in sheets:
                if sheet.get('properties', {}).get('title') == sheet_name:
                    return sheet.get('properties', {}).get('sheetId')
            print(f"Kh√¥ng t√¨m th·∫•y sheet '{sheet_name}' trong b·∫£ng t√≠nh.")
            return None
        return None
    except Exception as e:
        print(f"L·ªói khi l·∫•y sheetId: {str(e)}")
        return None
def delete_row_by_range(spreadsheet_id, range_name):
    """
    X√≥a m·ªôt h√†ng trong Google Sheets b·∫±ng c√°ch s·ª≠ d·ª•ng range_name.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn x√≥a (v√≠ d·ª•: 'H√†ng Ch·ªù!A2:Z2')
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y sheetId t·ª´ t√™n sheet
            sheet_name = range_name.split('!')[0]
            sheet_id = get_sheet_id(spreadsheet_id, sheet_name)
            if sheet_id is None:
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheetId cho sheet '{sheet_name}'")
                return None

            # Ph√¢n t√≠ch ph·∫°m vi
            range_parts = range_name.split('!')[1]
            col_start = range_parts.split(':')[0][0]  # C·ªôt b·∫Øt ƒë·∫ßu
            row_start = int(range_parts.split(':')[0][1:]) - 1  # H√†ng b·∫Øt ƒë·∫ßu (chuy·ªÉn sang ch·ªâ s·ªë 0)
            col_end = range_parts.split(':')[1][0]  # C·ªôt k·∫øt th√∫c
            row_end = int(range_parts.split(':')[1][1:])  # H√†ng k·∫øt th√∫c (kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi)

            # Ki·ªÉm tra xem ph·∫°m vi c√≥ x√≥a ƒë√∫ng 1 h√†ng hay kh√¥ng
            if row_start != row_end - 1:
                print("Ph·∫°m vi kh√¥ng ph·∫£i l√† m·ªôt h√†ng duy nh·∫•t.")
                return None

            # T·∫°o y√™u c·∫ßu ƒë·ªÉ x√≥a h√†ng
            batch_update_request = {
                "requests": [
                    {
                        "deleteRange": {
                            "range": {
                                "sheetId": sheet_id,  # S·ª≠ d·ª•ng sheetId ·ªü ƒë√¢y
                                "startRowIndex": row_start,
                                "endRowIndex": row_end
                            },
                            "shiftDimension": "ROWS"
                        }
                    }
                ]
            }
            
            # G·ª≠i y√™u c·∫ßu x√≥a h√†ng
            sheet = service.spreadsheets()
            response = sheet.batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=batch_update_request
            ).execute()
            print(f"ƒê√£ x√≥a h√†ng trong ph·∫°m vi {range_name} th√†nh c√¥ng.")
            return response
        return None
    except Exception as e:
        print(f"L·ªói khi x√≥a h√†ng: {str(e)}")
        return None
def checkVJ(data):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu VJ t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    """
    global driver
    global username
    global password
    print("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu VJ...")
    loaive = 0
    time_text = 0 
    price_text = 0
    # Ki·ªÉm tra n·∫øu driver ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
    if not driver:
        driver = setup_chrome_driver()
        if not driver:
            print("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ChromeDriver cho VJ")
            return
    
    # TODO: Th√™m logic x·ª≠ l√Ω d·ªØ li·ªáu VJ ·ªü ƒë√¢y
    # V√≠ d·ª•: M·ªü trang web v√† x·ª≠ l√Ω d·ªØ li·ªáu
    try:
        # M·ªü trang web (thay th·∫ø URL b·∫±ng trang web th·ª±c t·∫ø)
        driver.get("https://agents2.vietjetair.com/login")
        print("ƒê√£ m·ªü trang web cho VJ")
        
        print(f"ƒêang nh·∫≠p username: {username}")
        
        # ƒê·ª£i cho element input username xu·∫•t hi·ªán
        wait = WebDriverWait(driver, 30)
        for field_name, value in [("username", username), ("password", password)]:
            input_elem = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, f"input[name='{field_name}']")))
            input_elem.clear()
            input_elem.send_keys(value)

        # Enter sau khi nh·∫≠p xong password
        input_elem.send_keys(Keys.RETURN)
        print(f"‚úÖ ƒê√£ nh·∫≠p username: {username} v√† nh·∫•n Enter")
        # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ sheet
        for row in data:
            
            # Ch·ªù t·ªõi khi dropdown render ra
            options = [row[0], row[1]]

            # T√¨m 2 c√°i dropdown
            dropdown_xpaths = [
                
                "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[2]/mat-form-field[1]/div/div[1]/div/mat-select/div/div[1]",
                "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[3]/mat-form-field[1]/div/div[1]/div/mat-select/div/div[1]"
            ]
            print(f"‚úÖ  b·∫Øt ƒë·∫ßu ch·ªçn option...")
            input_xpaths = [
                
                "/html/body/div[2]/div[2]/div/div/div/mat-option[1]/span/ngx-mat-select-search/div/input",
                "/html/body/div[2]/div[2]/div/div/div/mat-option[1]/span/ngx-mat-select-search/div/input"
            ]
            # X·ª≠ l√Ω t·ª´ng c√°i dropdown
            
            try:
                wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
                time.sleep(1)
                date_input = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[formcontrolname='departureDate']"))
                )
                
                # ƒê·∫∑t ng√†y th√°ng nƒÉm mong mu·ªën (v√≠ d·ª•: 2025-04-05)
                desired_date = str(row[3])  # Thay ƒë·ªïi ng√†y th√°ng nƒÉm theo √Ω mu·ªën
                
                # S·ª≠ d·ª•ng JavaScript ƒë·ªÉ ƒë·∫∑t gi√° tr·ªã tr·ª±c ti·∫øp
                driver.execute_script(
                    "arguments[0].value = arguments[1]; "
                    "arguments[0].dispatchEvent(new Event('input', { bubbles: true })); "
                    "arguments[0].dispatchEvent(new Event('change', { bubbles: true }));",
                    date_input, desired_date
                )
                
                print(f"ƒê√£ ƒë·∫∑t ng√†y th√°ng nƒÉm: {desired_date}")
                
                # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                
                
            except Exception as e:
                print(f"L·ªói khi ƒë·∫∑t ng√†y th√°ng nƒÉm: {str(e)}")
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, dropdown_xpaths[0]))).click()
            
            print(f"üëâ Click dropdown th·ª© {1}")
            
            # Ch·ªù √¥ input search hi·ªán ra
            search_input = wait.until(
                EC.presence_of_element_located((By.XPATH, input_xpaths[0]))
            )
            search_input = wait.until(
                EC.element_to_be_clickable((By.XPATH, input_xpaths[0]))
            )
            search_input.send_keys(options[0])
            print(f"‚å®Ô∏è G√µ '{options[0]}'")
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, dropdown_xpaths[1])))
            dropdown.click()

            print(f"üëâ Click dropdown th·ª© {2}")
            
            # Ch·ªù √¥ input search hi·ªán ra
            search_input = wait.until(
                EC.visibility_of_element_located((By.XPATH, input_xpaths[1]))
            )
            search_input.send_keys(options[1])
            print(f"‚å®Ô∏è G√µ '{options[1]}'")
                # Delay t√≠ ƒë·ªÉ n√≥ render option
                
            
            # T√¨m element input t√¨m ki·∫øm theo placeholder
            
            
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ k·∫øt qu·∫£ t√¨m ki·∫øm hi·ªÉn th·ªã
            
            
            # T√¨m v√† click v√†o option ch·ª©a n·ªôi dung t·ª´ row[0]
            
            
            # T√¨m element input ng√†y th√°ng nƒÉm
            

            
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            buttontimkiem= wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[6]/div[1]/button")))
            buttontimkiem.click()
            # Click v√†o element span
            try:
                date_element_eco = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div/div[2]/div[4]/span/span[1]"))
                )
                time.sleep(1)

                date_element_deluxe = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div/div[2]/div[3]/span/span[1]"))
                )
                ecovalue= date_element_eco.text.replace(",", "")
                deluxevalue= date_element_deluxe.text.replace(",", "")
                if int(ecovalue)<int(deluxevalue)-40000:
                    date_element_eco.click()
                    loaive="ECO"
                else :
                    loaive="DELUXE"
                    date_element_deluxe.click()
            # ƒê·ª£i b·∫£ng th√¥ng tin chuy·∫øn bay xu·∫•t hi·ªán
            # ƒê·ª£i 5 gi√¢y ƒë·ªÉ b·∫£ng hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            except Exception as e:
                driver.save_screenshot("browser_screenshot_start.png")
                print("kh√¥ng c√≥ v√© n√†o ")
                
                # G·ª≠i ·∫£nh l√™n Telegram
                
                message = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n\nH√£ng: VIETJET - Ch·∫∑ng bay: "+row[0]+"-"+row[1]
                if data[0][5] == "TRUE":
                    message += " Kh·ª© H·ªìi("
                else:
                    message += " 1 Chi·ªÅu("
                message += f"H·∫øt V√© \n\n {row[0]} - {row[1]} "
                message += f" ng√†y {cut_year(desired_date,simple=True)} H·∫øt V√© \n"
                
                
                
                
              
                if row[5]=="TRUE":
                    
                    checkVJback(data,time_text, price_text,loaive,desired_date)
                    break
                else:
                    message +=f"<b>\nKh√¥ng c√≥ v√© h√£y ƒë·ªïi ng√†y bay kh√°c </b>"
                    if send_telegram_message(message, ["browser_screenshot_start.png"]):
                        print("ƒê√£ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                        break
            try:
                # Ch·ª•p ·∫£nh to√†n b·ªô tr√¨nh duy·ªát
                wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
                time_element = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div[2]/div/div[1]/div[1]/div[3]"))
                )
                time.sleep(3)
                # L·∫•y n·ªôi dung text c·ªßa element
                time_text = time_element.text
                
                # Thay ƒë·ªïi ƒë·ªãnh d·∫°ng th·ªùi gian
                
                
                
                
                price_element = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "div.font_22.color_white.font_money"))
                )
                # L·∫•y n·ªôi dung text c·ªßa element
                price_text = price_element.text
                driver.save_screenshot("browser_screenshot_start.png")
                print("ƒê√£ ch·ª•p ·∫£nh to√†n b·ªô tr√¨nh duy·ªát")
                
                # G·ª≠i ·∫£nh l√™n Telegram
                message = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n\nH√£ng: VIETJET - Ch·∫∑ng bay: "+row[0]+"-"+row[1]
                
                if data[0][5] == "TRUE":
                    message += " Kh·ª© H·ªìi("
                else:
                    message += " 1 Chi·ªÅu("
                message += f"{loaive}: {price_text})\n\n {row[0]} - {row[1]} "
                if loaive=='ECO' or loaive=='DELUXE':
                    message += f"{cat_time(time_text)}  "
                else :
                    message += f" ng√†y {cut_year(desired_date,simple=True)}\n"
                message += f" \n"
                
                
                
                
                # L·∫•y th√¥ng tin chuy·∫øn bay
                if row[5]=="TRUE":
                    print(message)
                    checkVJback(data,time_text, price_text,loaive,desired_date)
                    break
                else:
                    giachot = to_value(price_text)+ giacuoi(loaive)
                    message += f"<b>\nVietjet 7kg x√°ch tay, 20kg k√Ω g·ª≠i, gi√° v√© = {to_price((giachot))}</b>\n"
                    if send_telegram_message(message, ["browser_screenshot_start.png"]):
                        print("ƒê√£ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                    else:
                        print("Kh√¥ng th·ªÉ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                
            except Exception as e:
                print('l·ªói c√≥ v√© ·∫•n v√†o khong load ƒë∆∞·ª£c th√¥ng tin v√©')
                send_telegram_message(message, ["browser_screenshot_start.png"])
                
                
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu VJ: {str(e)}")
def checkVJback(data,time_text_0,price_text_0,loaive,desired_date_0):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu VJ t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    """
    global driver
    print("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu VJBack...")
    loaiveve=" ‚õî H·∫øt V√© "
    # Ki·ªÉm tra n·∫øu driver ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
    if not driver:
        driver = setup_chrome_driver()
        if not driver:
            print("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ChromeDriver cho VJ")
            return
    
    # TODO: Th√™m logic x·ª≠ l√Ω d·ªØ li·ªáu VJ ·ªü ƒë√¢y
    # V√≠ d·ª•: M·ªü trang web v√† x·ª≠ l√Ω d·ªØ li·ªáu
    try:
        # M·ªü trang web (thay th·∫ø URL b·∫±ng trang web th·ª±c t·∫ø)
        driver.get("https://agents2.vietjetair.com/login")
        print("ƒê√£ m·ªü trang web cho VJback")
        
        
        # ƒê·ª£i cho element input username xu·∫•t hi·ªán
        wait = WebDriverWait(driver, 30)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ sheet
        for row in data:
            options = [row[1], row[0]]

            # T√¨m 2 c√°i dropdown
            dropdown_xpaths = [
                
                "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[2]/mat-form-field[1]/div/div[1]/div/mat-select/div/div[1]",
                "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[3]/mat-form-field[1]/div/div[1]/div/mat-select/div/div[1]"
            ]
            print(f"‚úÖ  b·∫Øt ƒë·∫ßu ch·ªçn option...")
            input_xpaths = [
                
                "/html/body/div[2]/div[2]/div/div/div/mat-option[1]/span/ngx-mat-select-search/div/input",
                "/html/body/div[2]/div[2]/div/div/div/mat-option[1]/span/ngx-mat-select-search/div/input"
            ]
            # X·ª≠ l√Ω t·ª´ng c√°i dropdown
            
            try:
                wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
                date_input = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[formcontrolname='departureDate']"))
                )
                
                # ƒê·∫∑t ng√†y th√°ng nƒÉm mong mu·ªën (v√≠ d·ª•: 2025-04-05)
                desired_date = str(row[4])  # Thay ƒë·ªïi ng√†y th√°ng nƒÉm theo √Ω mu·ªën
                
                # S·ª≠ d·ª•ng JavaScript ƒë·ªÉ ƒë·∫∑t gi√° tr·ªã tr·ª±c ti·∫øp
                driver.execute_script(
                    "arguments[0].value = arguments[1]; "
                    "arguments[0].dispatchEvent(new Event('input', { bubbles: true })); "
                    "arguments[0].dispatchEvent(new Event('change', { bubbles: true }));",
                    date_input, desired_date
                )
                
                print(f"ƒê√£ ƒë·∫∑t ng√†y th√°ng nƒÉm: {desired_date}")
                
                # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                
                
            except Exception as e:
                print(f"L·ªói khi ƒë·∫∑t ng√†y th√°ng nƒÉm: {str(e)}")
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, dropdown_xpaths[0]))).click()
            
            print(f"üëâ Click dropdown th·ª© {1}")
            
            # Ch·ªù √¥ input search hi·ªán ra
            search_input = wait.until(
                EC.presence_of_element_located((By.XPATH, input_xpaths[0]))
            )
            search_input = wait.until(
                EC.element_to_be_clickable((By.XPATH, input_xpaths[0]))
            )
            search_input.send_keys(options[0])
            print(f"‚å®Ô∏è G√µ '{options[0]}'")
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, dropdown_xpaths[1])))
            dropdown.click()

            print(f"üëâ Click dropdown th·ª© {2}")
            
            # Ch·ªù √¥ input search hi·ªán ra
            search_input = wait.until(
                EC.visibility_of_element_located((By.XPATH, input_xpaths[1]))
            )
            search_input.send_keys(options[1])
            print(f"‚å®Ô∏è G√µ '{options[1]}'")
                # Delay t√≠ ƒë·ªÉ n√≥ render option
                
            
            # T√¨m element input t√¨m ki·∫øm theo placeholder
            
            
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ k·∫øt qu·∫£ t√¨m ki·∫øm hi·ªÉn th·ªã
            
            
            # T√¨m v√† click v√†o option ch·ª©a n·ªôi dung t·ª´ row[0]
            
            
            # T√¨m element input ng√†y th√°ng nƒÉm
            

            
            wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
            buttontimkiem= wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div/div[3]/div[1]/div/div/div[1]/app-date-destination/div/section[1]/div/form/div[6]/div[1]/button")))
            buttontimkiem.click()
            # Click v√†o element span
            try:
                date_element_eco = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div/div[2]/div[4]/span/span[1]"))
                )

                date_element_deluxe = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div/div[2]/div[3]/span/span[1]"))
                )
                ecovalue= date_element_eco.text.replace(",", "")
                deluxevalue= date_element_deluxe.text.replace(",", "")
                if int(ecovalue)<int(deluxevalue)-40000:
                    date_element_eco.click()
                    loaiveve="ECO"
                else :
                    loaiveve="DELUXE"
                    date_element_deluxe.click()
            except Exception as e:
                print('Kh√¥ng c√≥ v√© chi·ªÅu v·ªÅ')
                driver.save_screenshot("browser_screenshot_back.png")
                print("ƒê√£ ch·ª•p ·∫£nh to√†n b·ªô tr√¨nh duy·ªát")
                message = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n\nH√£ng: VIETJET - Ch·∫∑ng bay: "+row[0]+"-"+row[1]  # icon VNA + in ƒë·∫≠m t√™n kh√°ch
                
                if loaive==0:
                    
                    message += " Kh·ª© H·ªìi("
                    message += f"H·∫øt V√© - H·∫øt V√© \n\n {row[0]} - {row[1]} "
                    message += f" ng√†y {cut_year(desired_date_0,simple=True)}H·∫øt V√©\n"
                    message += f" {row[1]} - {row[1]} ng√†y {cut_year(desired_date,simple=True)}H·∫øt V√©\n"
                    message +=f"<b>\nKh√¥ng c√≥ v√© h√£y ƒë·ªïi ng√†y bay kh√°c </b>"
                    
                else :
                    message += " Kh·ª© H·ªìi("
                    
                    message += f"{loaive}: {price_text} - H·∫øt V√© \n\n {row[0]} - {row[1]} "
                    message += f"{cat_time(time_text_0)} ng√†y {cut_year(desired_date_0,simple=True)}\n {row[1]} - {row[0]} ng√†y {cut_year(desired_date,simple=True)}H·∫øt V√©\n"
                    message +=f"<b>\nKh√¥ng c√≥ v√© h√£y ƒë·ªïi ng√†y bay kh√°c </b>"


                
                if send_telegram_message(message, ["browser_screenshot_start.png","browser_screenshot_back.png"]):
                    print("ƒê√£ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                else:
                    print("Kh√¥ng th·ªÉ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                
            # ƒê·ª£i b·∫£ng th√¥ng tin chuy·∫øn bay xu·∫•t hi·ªán
            # ƒê·ª£i 5 gi√¢y ƒë·ªÉ b·∫£ng hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            
            try:
                # Ch·ª•p ·∫£nh to√†n b·ªô tr√¨nh duy·ªát
                wait.until(lambda driver: len(driver.find_elements(By.CLASS_NAME, "cdk-overlay-backdrop")) == 0)
                time_element = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/app-root/app-main-layout/div/div/app-booking-layout/div/div[1]/div[3]/div[1]/div/div/div[1]/div[1]/app-list-flight/div[4]/div/div/div[2]/div/div[1]/div[1]/div[3]"))
                )
                time.sleep(3)
                # L·∫•y n·ªôi dung text c·ªßa element
                time_text = time_element.text
                
                # Thay ƒë·ªïi ƒë·ªãnh d·∫°ng th·ªùi gian
                
                
                
                
                price_element = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "div.font_22.color_white.font_money"))
                )
                # L·∫•y n·ªôi dung text c·ªßa element
                price_text_ve = price_element.text
                driver.save_screenshot("browser_screenshot_back.png")
                print("ƒê√£ ch·ª•p ·∫£nh to√†n b·ªô tr√¨nh duy·ªát")
                
                # G·ª≠i ·∫£nh l√™n Telegram
                
                message = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n\nH√£ng: VIETJET - Ch·∫∑ng bay: "+row[0]+"-"+row[1] # icon VNA + in ƒë·∫≠m t√™n kh√°ch
                
                if loaive==0:
                    
                    message += " Kh·ª© H·ªìi("
                    message += f"H·∫øt V√© - {loaiveve}: {price_text_ve} \n\n {row[0]} - {row[1]} "
                    message += f" ng√†y {cut_year(desired_date,simple=True)}H·∫øt V√©\n"
                    message += f" {row[1]} - {row[0]}{cat_time(time_text)} ng√†y {cut_year(desired_date,simple=True)}\n"
                    message +=f"<b>\nKh√¥ng c√≥ v√© h√£y ƒë·ªïi ng√†y bay kh√°c </b>"
                    
                else :
                    message += " Kh·ª© H·ªìi("
                    
                    message += f"{loaive}: {price_text_0} - {loaiveve}: {price_text_ve}\n\n {row[0]} - {row[1]} "
                    message += f"{cat_time(time_text_0)} ng√†y {cut_year(desired_date_0,simple=True)}\n {row[1]} - {row[0]} {cat_time(time_text)} ng√†y {cut_year(desired_date,simple=True)}\n"
                    



                    
                    
                    giachot = to_value(price_text_ve)+ giacuoi(loaive,loaiveve) +to_value(price_text_0)
                    message += f"<b>Vietjet 7kg x√°ch tay, 20kg k√Ω g·ª≠i, gi√° v√© = {to_price((giachot))}</b>\n"
                print(message)
                if send_telegram_message(message, ["browser_screenshot_start.png","browser_screenshot_back.png"]):
                    print("ƒê√£ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                else:
                    print("Kh√¥ng th·ªÉ g·ª≠i ·∫£nh to√†n b·ªô tr√¨nh duy·ªát l√™n Telegram")
                
                # L·∫•y th√¥ng tin chuy·∫øn bay
                
                
            except Exception as e:
                print(str(e))
                
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu VJback: {str(e)}")

def checkVNA(data):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu VNA t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    """
    global driver
    print("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu VNA...")
    
    # Ki·ªÉm tra n·∫øu driver ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
    if not driver:
        driver = setup_chrome_driver()
        if not driver:
            print("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ChromeDriver cho VNA")
            return
    
    # TODO: Th√™m logic x·ª≠ l√Ω d·ªØ li·ªáu VNA ·ªü ƒë√¢y
    # V√≠ d·ª•: M·ªü trang web v√† x·ª≠ l√Ω d·ªØ li·ªáu
    try:
        # M·ªü trang web (thay th·∫ø URL b·∫±ng trang web th·ª±c t·∫ø)
        driver.get("https://www.example.com")
        print("ƒê√£ m·ªü trang web cho VNA")
        
        # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ sheet
        for row in data:
            print("VNA Data:", row)
            # TODO: Th√™m logic x·ª≠ l√Ω d·ªØ li·ªáu VNA c·ª• th·ªÉ ·ªü ƒë√¢y
            
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu VNA: {str(e)}")

def check(data):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    """
    global SPREADSHEET_ID
    if data and len(data) > 0:
        # T·∫°o n·ªôi dung tin nh·∫Øn
        
            
        # G·ªçi c√°c h√†m x·ª≠ l√Ω d·ªØ li·ªáu
        checkVJ(data)
        
        
        # checkVNA(data)

    else:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")

def update_sheet(spreadsheet_id, range_name, values):
    """
    C·∫≠p nh·∫≠t d·ªØ li·ªáu trong Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn c·∫≠p nh·∫≠t (v√≠ d·ª•: 'Sheet1!A1:D10')
    :param values: Gi√° tr·ªã m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t (d·∫°ng danh s√°ch c√°c danh s√°ch)
    :return: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            body = {
                'values': values
            }
            result = sheet.values().update(
                spreadsheetId=spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',  # 'RAW' c√≥ th·ªÉ ƒë∆∞·ª£c thay b·∫±ng 'USER_ENTERED' n·∫øu c·∫ßn format
                body=body
            ).execute()
            print(f"ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu trong ph·∫°m vi {range_name}")
            return True
        return False
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
        return False

def main():
    # ID c·ªßa spreadsheet
    SPREADSHEET_ID = CONFIG['SPREADSHEET_ID']
    
    print("B·∫Øt ƒë·∫ßu ki·ªÉm tra d·ªØ li·ªáu t·ª´ Google Sheet...")
    print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh")
    
    try:
        # Kh·ªüi t·∫°o ChromeDriver
        global driver
        
        
        while True:
            driver = setup_chrome_driver()
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ A2:E2
            data = read_sheet(SPREADSHEET_ID, 'H√†ng Ch·ªù!A2:I2')
            if data:
                print("\nD·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet CheckVe (A2:F2):")
                for row in data:
                    print(row)
                # G·ªçi h√†m check() ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
                if data[0][5] and data[0][0] and data[0][1]:
                    check(data)
                # Xo√° c√°c √¥ A2, B2, F2 trong Google Sheet
                    delete_row_by_range(SPREADSHEET_ID,'H√†ng Ch·ªù!A2:Z2')
                close_chrome_driver()
            else:
                print("\nKh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c√≥ l·ªói khi ƒë·ªçc d·ªØ li·ªáu")
                close_chrome_driver()
            # ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            time.sleep(3)
            
    except KeyboardInterrupt:
        print("\nƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
        close_chrome_driver()
   

if __name__ == "__main__":
    main() 