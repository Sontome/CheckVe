import time
from io import BytesIO
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
CONFIGTEST = {
    'SCOPES': ['https://www.googleapis.com/auth/spreadsheets'],
    'SERVICE_ACCOUNT_FILE': 'keytest.json',  # File credentials c·ªßa b·∫°n
    'SPREADSHEET_ID': '1OwKfz3bhJKai2ph6Fc8GOeN087hBU1jPY9dm02ZisQo',
    'TELEGRAM_BOT_TOKEN': '5737041469:AAG5XdXVwATvldvDpXmnlQT0dmh2-sZ70gE',
    'TELEGRAM_CHAT_ID': str(-4698930772),  # room tele ch√≠nh
    
}
CONFIG=CONFIGTEST
TELEGRAM_API_URL = f'https://api.telegram.org/bot{CONFIG["TELEGRAM_BOT_TOKEN"]}/sendMessage'
bot_token = CONFIG['TELEGRAM_BOT_TOKEN']
chat_id = CONFIG['TELEGRAM_CHAT_ID']
driver = None
username = 'KR242012A18KXM'
password = 'Grgnbd@34562312'
def send_telegram(message, bot_token=bot_token, chat_id=chat_id, driver=None, message_id=None):
    """
    G·ª≠i tin nh·∫Øn Telegram.
    - N·∫øu c√≥ driver ‚Üí ch·ª•p screenshot g·ª≠i k√®m
    - N·∫øu c√≥ message_id ‚Üí s·∫Ω reply l·∫°i tin nh·∫Øn ƒë√≥
    üëâ Tr·∫£ v·ªÅ (success: bool, message_id: int ho·∫∑c None)
    """
    data = {
        'chat_id': chat_id,
        'parse_mode': 'HTML',
    }

    if message_id:
        data['reply_to_message_id'] = message_id

    response = None

    try:
        if driver is not None:
            from io import BytesIO
            screenshot = BytesIO()
            driver.save_screenshot(screenshot)
            screenshot.seek(0)

            files = {
                'photo': ('screenshot.png', screenshot)
            }
            data['caption'] = message

            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendPhoto",
                data=data,
                files=files
            )
        else:
            data['text'] = message
            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                data=data
            )

        if response.status_code == 200:
            res_json = response.json()
            msg_id = res_json.get("result", {}).get("message_id", None)
            return True, msg_id
        else:
            return False, None

    except Exception as e:
        print(f"L·ªói khi g·ª≠i Telegram: {e}")
        return False, None
#send_telegram(bot_token,chat_id,'test')

def cut_year(date_str: str) -> str:
    """
    Nh·∫≠n chu·ªói ki·ªÉu 'HH:MM ng√†y DD/MM/YYYY', tr·∫£ v·ªÅ 'HH:MM ng√†y DD/MM'
    """
    try:
        dt = datetime.strptime(date_str, "%H:%M ng√†y %d/%m/%Y")
        return dt.strftime("%H:%M ng√†y %d/%m")
    except ValueError:
        print(f"‚ùå Format sai: {date_str}")
        return date_str

def to_value(currency_str: str) -> int:
    """
    Nh·∫≠n chu·ªói ki·ªÉu '138,300 KRW' => tr·∫£ v·ªÅ s·ªë nguy√™n 138300
    """
    try:
        clean_str = ''.join(c for c in currency_str if c.isdigit())
        return int(clean_str)
    except:
        print(f"‚ùå Kh√¥ng parse ƒë∆∞·ª£c: {currency_str}")
        return 0

def to_price(amount: int, currency: str = "KRW", round_to: int = 100) -> str:
    """
    Chuy·ªÉn s·ªë nguy√™n th√†nh chu·ªói ki·ªÉu '1,138,300 KRW'
    L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t round_to (m·∫∑c ƒë·ªãnh 100)
    """
    try:
        # L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t 'round_to'
        rounded = round(amount / round_to) * round_to
        formatted = f"{rounded:,}"
        return f"{formatted} {currency}"
    except:
        print(f"‚ùå Kh√¥ng convert ƒë∆∞·ª£c: {amount}")
        return str(amount)

def setup_chrome_driver():
    """
    Thi·∫øt l·∫≠p v√† kh·ªüi ƒë·ªông ChromeDriver
    :return: ƒê·ªëi t∆∞·ª£ng WebDriver
    """
    try:
        # Thi·∫øt l·∫≠p options cho Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Ch·∫°y ·∫©n (b·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n)
        
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Kh·ªüi t·∫°o service v√† driver
        
        driver = webdriver.Chrome(options=chrome_options)
        
        print("ƒê√£ kh·ªüi ƒë·ªông ChromeDriver th√†nh c√¥ng")
        return driver
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông ChromeDriver: {str(e)}")
        return None

def close_chrome_driver():
    """
    ƒê√≥ng ChromeDriver
    """
    global driver
    if driver:
        try:
            driver.quit()
            print("ƒê√£ ƒë√≥ng ChromeDriver")
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng ChromeDriver: {str(e)}")
        finally:
            driver = None


def get_google_sheets_service():
    try:
        # ƒê·ªçc credentials t·ª´ file JSON
        credentials = service_account.Credentials.from_service_account_file(
            CONFIG['SERVICE_ACCOUNT_FILE'], scopes=CONFIG['SCOPES'])
        
        # T·∫°o service
        service = build('sheets', 'v4', credentials=credentials)
        return service
    except Exception as e:
        print(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Sheets: {str(e)}")
        return None

def read_sheet(spreadsheet_id, range_name):
    """
    ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn ƒë·ªçc (v√≠ d·ª•: 'Sheet1!A1:D10')
    :return: D·ªØ li·ªáu t·ª´ sheet
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            result = sheet.values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            values = result.get('values', [])
            
            return values
        return None
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None

def get_sheet_id(spreadsheet_id, sheet_name):
    """
    L·∫•y sheetId c·ªßa m·ªôt sheet trong b·∫£ng t√≠nh.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param sheet_name: T√™n sheet (v√≠ d·ª•: 'H√†ng Ch·ªù')
    :return: sheetId n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y metadata c·ªßa b·∫£ng t√≠nh
            sheet_metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
            sheets = sheet_metadata.get('sheets', [])
            
            # T√¨m sheetId t·ª´ t√™n sheet
            for sheet in sheets:
                if sheet.get('properties', {}).get('title') == sheet_name:
                    return sheet.get('properties', {}).get('sheetId')
            print(f"Kh√¥ng t√¨m th·∫•y sheet '{sheet_name}' trong b·∫£ng t√≠nh.")
            return None
        return None
    except Exception as e:
        print(f"L·ªói khi l·∫•y sheetId: {str(e)}")
        return None

def delete_row_by_range(spreadsheet_id, range_name):
    """
    X√≥a m·ªôt h√†ng trong Google Sheets b·∫±ng c√°ch s·ª≠ d·ª•ng range_name.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn x√≥a (v√≠ d·ª•: 'H√†ng Ch·ªù!A2:Z2')
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y sheetId t·ª´ t√™n sheet
            sheet_name = range_name.split('!')[0]
            sheet_id = get_sheet_id(spreadsheet_id, sheet_name)
            if sheet_id is None:
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheetId cho sheet '{sheet_name}'")
                return None

            # Ph√¢n t√≠ch ph·∫°m vi
            range_parts = range_name.split('!')[1]
            col_start = range_parts.split(':')[0][0]  # C·ªôt b·∫Øt ƒë·∫ßu
            row_start = int(range_parts.split(':')[0][1:]) - 1  # H√†ng b·∫Øt ƒë·∫ßu (chuy·ªÉn sang ch·ªâ s·ªë 0)
            col_end = range_parts.split(':')[1][0]  # C·ªôt k·∫øt th√∫c
            row_end = int(range_parts.split(':')[1][1:])  # H√†ng k·∫øt th√∫c (kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi)

            # Ki·ªÉm tra xem ph·∫°m vi c√≥ x√≥a ƒë√∫ng 1 h√†ng hay kh√¥ng
            if row_start != row_end - 1:
                print("Ph·∫°m vi kh√¥ng ph·∫£i l√† m·ªôt h√†ng duy nh·∫•t.")
                return None

            # T·∫°o y√™u c·∫ßu ƒë·ªÉ x√≥a h√†ng
            batch_update_request = {
                "requests": [
                    {
                        "deleteRange": {
                            "range": {
                                "sheetId": sheet_id,  # S·ª≠ d·ª•ng sheetId ·ªü ƒë√¢y
                                "startRowIndex": row_start,
                                "endRowIndex": row_end
                            },
                            "shiftDimension": "ROWS"
                        }
                    }
                ]
            }
            
            # G·ª≠i y√™u c·∫ßu x√≥a h√†ng
            sheet = service.spreadsheets()
            response = sheet.batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=batch_update_request
            ).execute()
            print(f"ƒê√£ x√≥a h√†ng trong ph·∫°m vi {range_name} th√†nh c√¥ng.")
            return response
        return None
    except Exception as e:
        print(f"L·ªói khi x√≥a h√†ng: {str(e)}")
        return None

def update_sheet(spreadsheet_id, range_name, values):
    """
    C·∫≠p nh·∫≠t d·ªØ li·ªáu trong Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn c·∫≠p nh·∫≠t (v√≠ d·ª•: 'Sheet1!A1:D10')
    :param values: Gi√° tr·ªã m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t (d·∫°ng danh s√°ch c√°c danh s√°ch)
    :return: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            body = {
                'values': values
            }
            result = sheet.values().update(
                spreadsheetId=spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',  # 'RAW' c√≥ th·ªÉ ƒë∆∞·ª£c thay b·∫±ng 'USER_ENTERED' n·∫øu c·∫ßn format
                body=body
            ).execute()
            print(f"ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu trong ph·∫°m vi {range_name}")
            return True
        return False
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
        return False

def check(data, spreadsheet_id):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    """
    if data and len(data) > 0:
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = "üîî <b>‚úàÔ∏è <u>VNA Loading...</u></b>\n\n"
        message += " T√™n kh√°ch: " + data[0][6] + "\n"
        message += f" {data[0][0]} --> {data[0][1]} | "

        if data[0][5] == "TRUE":
            message += "üîÅ Kh·ª© H·ªìi"
        else:
            message += "‚û°Ô∏è 1 Chi·ªÅu"
        msg_id = send_telegram(message,message_id=116347)
        # G·ª≠i tin nh·∫Øn l√™n Telegram
        if msg_id:
            print(msg_id)
        else:
            print("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l√™n Telegram")
        
        # G·ªçi c√°c h√†m x·ª≠ l√Ω d·ªØ li·ªáu
        #checkVNA(data, spreadsheet_id)
        
    else:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")
def main():
    # ID c·ªßa spreadsheet
    spreadsheet_id = CONFIG['SPREADSHEET_ID']
    
    print("B·∫Øt ƒë·∫ßu ki·ªÉm tra d·ªØ li·ªáu t·ª´ Google Sheet...")
    print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh")
    
    try:
        # Kh·ªüi t·∫°o ChromeDriver
        global driver
        
        while True:
            driver = setup_chrome_driver()
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ A2:E2
            data = read_sheet(spreadsheet_id, 'H√†ng Ch·ªù VNA!A2:I2')
            if data:
                print("\nC√≥ h√†ng ch·ªù c·∫ßn check VNA")
                for row in data:
                    print(row)
                # G·ªçi h√†m check() ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
                if data[0][5] and data[0][0] and data[0][1]:
                    check(data, spreadsheet_id)
                # Xo√° c√°c √¥ A2, B2, F2 trong Google Sheet
                #delete_row_by_range(spreadsheet_id, 'H√†ng Ch·ªù!A2:Z2')
            close_chrome_driver()
            # ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            time.sleep(4000)
            
    except KeyboardInterrupt:
        print("\nƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
        close_chrome_driver()
   

if __name__ == "__main__":
    main() 