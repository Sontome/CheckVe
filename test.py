import time
import os
from PIL import Image
from io import BytesIO
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
CONFIGTEST = {
    'SCOPES': ['https://www.googleapis.com/auth/spreadsheets'],
    'SERVICE_ACCOUNT_FILE': 'keytest.json',  # File credentials c·ªßa b·∫°n
    'SPREADSHEET_ID': '1OwKfz3bhJKai2ph6Fc8GOeN087hBU1jPY9dm02ZisQo',
    'TELEGRAM_BOT_TOKEN': '7579394048:AAE8W83TfxHemGzMXvOLUhQheXNRCh1InsA',
    'TELEGRAM_CHAT_ID': str(-4698930772),  # room tele ch√≠nh
    
}
CONFIG=CONFIGTEST
TELEGRAM_API_URL = f'https://api.telegram.org/bot{CONFIG["TELEGRAM_BOT_TOKEN"]}/sendMessage'
bot_token = CONFIG['TELEGRAM_BOT_TOKEN']
chat_id = CONFIG['TELEGRAM_CHAT_ID']
driver = None
usernameVNA = '5253'
passwordVNA = 'Ha@112233'
def send_telegram(message, bot_token=None, chat_id=None, driver=None, element=None, send_photo=True, img_path="fullVNA.png"):
    """
    G·ª≠i tin nh·∫Øn Telegram:
    - send_photo = True ‚Üí g·ª≠i ·∫£nh k√®m (∆∞u ti√™n element n·∫øu c√≥)
    - img_path ‚Üí tu·ª≥ ch·ªçn t√™n file ·∫£nh (m·∫∑c ƒë·ªãnh: fullVNA.png)
    üëâ Tr·∫£ v·ªÅ (success: bool, message_id: int ho·∫∑c None)
    """
    if not bot_token or not chat_id:
        raise ValueError("bot_token v√† chat_id l√† b·∫Øt bu·ªôc")

    data = {
        'chat_id': chat_id,
        'parse_mode': 'HTML',
    }

    try:
        if send_photo and (driver or element):
            # Ch·ª•p ·∫£nh theo element ho·∫∑c to√†n tr√¨nh duy·ªát
            if element:
                element.screenshot(img_path)
            elif driver:
                driver.save_screenshot(img_path)

            with open(img_path, 'rb') as f:
                files = {
                    'photo': (os.path.basename(img_path), f)
                }
                data['caption'] = message

                response = requests.post(
                    f"https://api.telegram.org/bot{bot_token}/sendPhoto",
                    data=data,
                    files=files
                )

            os.remove(img_path)

        else:
            # G·ª≠i tin nh·∫Øn ch·ªØ
            data['text'] = message
            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                data=data
            )

        if response.status_code == 200:
            res_json = response.json()
            return True, res_json.get("result", {}).get("message_id")
        else:
            print("‚ùå G·ª≠i l·ªói cmnr:", response.text)
            return False, None

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i Telegram: {e}")
        return False, None
        
def cut_year(date_str: str, simple: bool = False) -> str:
    """
    - N·∫øu `simple=False` (default): 'HH:MM ng√†y DD/MM/YYYY' ‚Üí 'HH:MM ng√†y DD/MM'
    - N·∫øu `simple=True`: 'YYYY/MM/DD' ‚Üí 'DD/MM'
    """
    try:
        if simple:
            dt = datetime.strptime(date_str, "%Y/%m/%d")
            return dt.strftime("%d/%m")
        else:
            dt = datetime.strptime(date_str, "%H:%M ng√†y %d/%m/%Y")
            return dt.strftime("%H:%M ng√†y %d/%m")
    except ValueError:
        print(f"‚ùå Format sai: {date_str}")
        return date_str

def to_value(currency_str: str) -> int:
    """
    Nh·∫≠n chu·ªói ki·ªÉu '138,300 KRW' => tr·∫£ v·ªÅ s·ªë nguy√™n 138300
    """
    try:
        clean_str = ''.join(c for c in currency_str if c.isdigit())
        return int(clean_str)
    except:
        print(f"‚ùå Kh√¥ng parse ƒë∆∞·ª£c: {currency_str}")
        return 0

def to_price(amount: int, currency: str = "KRW", round_to: int = 100) -> str:
    """
    Chuy·ªÉn s·ªë nguy√™n th√†nh chu·ªói ki·ªÉu '1,138,300 KRW'
    L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t round_to (m·∫∑c ƒë·ªãnh 100)
    """
    try:
        # L√†m tr√≤n ƒë·∫øn g·∫ßn nh·∫•t 'round_to'
        rounded = round(amount / round_to) * round_to
        formatted = f"{rounded:,}"
        return f"{formatted} {currency}"
    except:
        print(f"‚ùå Kh√¥ng convert ƒë∆∞·ª£c: {amount}")
        return str(amount)

def setup_chrome_driver():
    """
    Thi·∫øt l·∫≠p v√† kh·ªüi ƒë·ªông ChromeDriver
    :return: ƒê·ªëi t∆∞·ª£ng WebDriver
    """
    try:
        # Thi·∫øt l·∫≠p options cho Chrome
        chrome_options = Options()
        #chrome_options.add_argument("--headless")  # Ch·∫°y ·∫©n (b·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n)
        
        chrome_options.add_argument("--window-size=1080,760")
        
        # Kh·ªüi t·∫°o service v√† driver
        
        driver = webdriver.Chrome(options=chrome_options)
        
        print("ƒê√£ kh·ªüi ƒë·ªông ChromeDriver th√†nh c√¥ng")
        return driver
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông ChromeDriver: {str(e)}")
        return None

def close_chrome_driver():
    """
    ƒê√≥ng ChromeDriver
    """
    global driver
    if driver:
        try:
            driver.quit()
            print("ƒê√£ ƒë√≥ng ChromeDriver")
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng ChromeDriver: {str(e)}")
        finally:
            driver = None


def get_google_sheets_service():
    try:
        # ƒê·ªçc credentials t·ª´ file JSON
        credentials = service_account.Credentials.from_service_account_file(
            CONFIG['SERVICE_ACCOUNT_FILE'], scopes=CONFIG['SCOPES'])
        
        # T·∫°o service
        service = build('sheets', 'v4', credentials=credentials)
        return service
    except Exception as e:
        print(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Sheets: {str(e)}")
        return None

def read_sheet(spreadsheet_id, range_name):
    """
    ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn ƒë·ªçc (v√≠ d·ª•: 'Sheet1!A1:D10')
    :return: D·ªØ li·ªáu t·ª´ sheet
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            result = sheet.values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            values = result.get('values', [])
            
            return values
        return None
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None

def get_sheet_id(spreadsheet_id, sheet_name):
    """
    L·∫•y sheetId c·ªßa m·ªôt sheet trong b·∫£ng t√≠nh.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param sheet_name: T√™n sheet (v√≠ d·ª•: 'H√†ng Ch·ªù')
    :return: sheetId n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y metadata c·ªßa b·∫£ng t√≠nh
            sheet_metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
            sheets = sheet_metadata.get('sheets', [])
            
            # T√¨m sheetId t·ª´ t√™n sheet
            for sheet in sheets:
                if sheet.get('properties', {}).get('title') == sheet_name:
                    return sheet.get('properties', {}).get('sheetId')
            print(f"Kh√¥ng t√¨m th·∫•y sheet '{sheet_name}' trong b·∫£ng t√≠nh.")
            return None
        return None
    except Exception as e:
        print(f"L·ªói khi l·∫•y sheetId: {str(e)}")
        return None

def delete_row_by_range(spreadsheet_id, range_name):
    """
    X√≥a m·ªôt h√†ng trong Google Sheets b·∫±ng c√°ch s·ª≠ d·ª•ng range_name.
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn x√≥a (v√≠ d·ª•: 'H√†ng Ch·ªù!A2:Z2')
    """
    try:
        service = get_google_sheets_service()
        if service:
            # L·∫•y sheetId t·ª´ t√™n sheet
            sheet_name = range_name.split('!')[0]
            sheet_id = get_sheet_id(spreadsheet_id, sheet_name)
            if sheet_id is None:
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheetId cho sheet '{sheet_name}'")
                return None

            # Ph√¢n t√≠ch ph·∫°m vi
            range_parts = range_name.split('!')[1]
            col_start = range_parts.split(':')[0][0]  # C·ªôt b·∫Øt ƒë·∫ßu
            row_start = int(range_parts.split(':')[0][1:]) - 1  # H√†ng b·∫Øt ƒë·∫ßu (chuy·ªÉn sang ch·ªâ s·ªë 0)
            col_end = range_parts.split(':')[1][0]  # C·ªôt k·∫øt th√∫c
            row_end = int(range_parts.split(':')[1][1:])  # H√†ng k·∫øt th√∫c (kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi)

            # Ki·ªÉm tra xem ph·∫°m vi c√≥ x√≥a ƒë√∫ng 1 h√†ng hay kh√¥ng
            if row_start != row_end - 1:
                print("Ph·∫°m vi kh√¥ng ph·∫£i l√† m·ªôt h√†ng duy nh·∫•t.")
                return None

            # T·∫°o y√™u c·∫ßu ƒë·ªÉ x√≥a h√†ng
            batch_update_request = {
                "requests": [
                    {
                        "deleteRange": {
                            "range": {
                                "sheetId": sheet_id,  # S·ª≠ d·ª•ng sheetId ·ªü ƒë√¢y
                                "startRowIndex": row_start,
                                "endRowIndex": row_end
                            },
                            "shiftDimension": "ROWS"
                        }
                    }
                ]
            }
            
            # G·ª≠i y√™u c·∫ßu x√≥a h√†ng
            sheet = service.spreadsheets()
            response = sheet.batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=batch_update_request
            ).execute()
            print(f"ƒê√£ x√≥a h√†ng trong ph·∫°m vi {range_name} th√†nh c√¥ng.")
            return response
        return None
    except Exception as e:
        print(f"L·ªói khi x√≥a h√†ng: {str(e)}")
        return None

def update_sheet(spreadsheet_id, range_name, values):
    """
    C·∫≠p nh·∫≠t d·ªØ li·ªáu trong Google Sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    :param range_name: Ph·∫°m vi c·∫ßn c·∫≠p nh·∫≠t (v√≠ d·ª•: 'Sheet1!A1:D10')
    :param values: Gi√° tr·ªã m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t (d·∫°ng danh s√°ch c√°c danh s√°ch)
    :return: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        service = get_google_sheets_service()
        if service:
            sheet = service.spreadsheets()
            body = {
                'values': values
            }
            result = sheet.values().update(
                spreadsheetId=spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',  # 'RAW' c√≥ th·ªÉ ƒë∆∞·ª£c thay b·∫±ng 'USER_ENTERED' n·∫øu c·∫ßn format
                body=body
            ).execute()
            print(f"ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu trong ph·∫°m vi {range_name}")
            return True
        return False
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
        return False
def checkVNA2chieu(data, spreadsheet_id):
    global driver
    global usernameVNA
    global passwordVNA
    subuser= 'HANVIETAIR'
    print("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu VNA...")
    
    # Ki·ªÉm tra n·∫øu driver ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
    if not driver:
        driver = setup_chrome_driver()
        if not driver:
            print("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ChromeDriver cho VNA")
            return
    
    # TODO: Th√™m logic x·ª≠ l√Ω d·ªØ li·ªáu VJ ·ªü ƒë√¢y
    # V√≠ d·ª•: M·ªü trang web v√† x·ª≠ l√Ω d·ªØ li·ªáu
    try:
        # M·ªü trang web (thay th·∫ø URL b·∫±ng trang web th·ª±c t·∫ø)
        driver.get("https://wholesale.powercallair.com/tm/tmLogin.lts")
        print("ƒê√£ m·ªü trang web cho VNA")
        
        print(f"ƒêang nh·∫≠p username: {usernameVNA}")
        
        # ƒê·ª£i cho element input username xu·∫•t hi·ªán
        wait = WebDriverWait(driver, 15)
        for field_name, value in [("user_agt_Code", usernameVNA), ("user_password", passwordVNA),("user_id", subuser)]:
            input_elem = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, f"input[name='{field_name}']")))
            input_elem.clear()
            input_elem.send_keys(value)

        # Enter sau khi nh·∫≠p xong password
        input_elem.send_keys(Keys.RETURN)
        print(f"‚úÖ ƒê√£ nh·∫≠p username: {usernameVNA} v√† nh·∫•n Enter")
    except:
        print("L·ªói login")
    for row in data:
        wait = WebDriverWait(driver, 20)
        if row[5] == "FALSE":
            checkbox = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "check_OW"))
            )
            
            # N·∫øu n√≥ ƒëang ƒë∆∞·ª£c check th√¨ click ƒë·ªÉ b·ªè ch·ªçn
            time.sleep(1)
            print("1 Chi·ªÅu")
            checkbox.click()
        else:
            print("2 Chi·ªÅu")
        start = wait.until(
            EC.presence_of_element_located((By.ID, "dep0"))
        )
        Select(start).select_by_value(row[0])
        # M·ªü city popup
        driver.find_element(By.ID, "arr0_text").click()

        # Log cho vui
        print(f"üõ¨ Ch·ªçn s√¢n bay ƒë·∫øn: {row[1]}")

        # ƒê·ª£i label xu·∫•t hi·ªán v√† click b·∫±ng JavaScript
        try:
            label = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, f"label[for='{row[1]}']"))
            )
            driver.execute_script("arguments[0].click();", label)

        except Exception as e:
            print(f"‚ùå Kh√¥ng ch·ªçn ƒë∆∞·ª£c city {row[1]}: {e}")
         
        startdate = datetime.strptime(row[3] , "%m/%d/%Y").strftime("%Y/%m/%d")
        print(f"üìÖ Ng√†y ƒëi: {startdate}")

        # T√¨m input ng√†y v√† set gi√° tr·ªã b·∫±ng JavaScript (do readonly)
        date_input = wait.until(
            EC.presence_of_element_located((By.ID, "depdate0_value"))
        )
        driver.execute_script("arguments[0].value = arguments[1];", date_input, startdate)
        if row[5] == "FALSE": 
            try:
                
                print(" 1 chi·ªÅu kh√¥ng c·∫ßn ƒëi·ªÅn ng√†y v·ªÅ")
            except Exception as e:
                print(f"‚ùå L·ªói khi ch·ªù n√∫t check_OW: {e}")
            
            
        else :
            
            backdate = datetime.strptime(row[4] , "%m/%d/%Y").strftime("%Y/%m/%d")
            print(f"üìÖ Ng√†y v·ªÅ: {backdate}")

            # T√¨m input ng√†y v√† set gi√° tr·ªã b·∫±ng JavaScript (do readonly)
            date_input = wait.until(
                EC.presence_of_element_located((By.ID, "depdate1_value"))
            )
            driver.execute_script("arguments[0].value = arguments[1];", date_input, backdate)
        
             
        driver.execute_script("goSkdFare('L');")


        WebDriverWait(driver, 20).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, "img[src*='now_waiting12_pwcall.gif']")))
        
        # 1. M·ªû MENU H√ÉNG BAY
        menu_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, '#carFilter > a.atHtit'))
        )
        menu_button.click()

        # 2. CH·ªú PH·∫¶N FILTER HI·ªÜN RA
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, '#carFilter .carFilter'))
        )

        # 3. CH·ªú V√Ä CLICK CH·ªåN VIETNAM AIRLINES
        vn_checkbox = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="checkbox"][desc="Î≤†Ìä∏ÎÇ®Ìï≠Í≥µ"]'))
        )

        # 4. N·∫æU CH∆ØA CH·ªåN TH√å M·ªöI CLICK
        if not vn_checkbox.is_selected():
            driver.execute_script("arguments[0].click();", vn_checkbox)
            print("‚úÖ ƒê√£ ch·ªçn Vietnam Airlines!")
        else:
            print("‚úÖ Vietnam Airlines ƒë√£ ƒë∆∞·ª£c ch·ªçn s·∫µn r·ªìi!")


        try:
            
        # 1. M·ªû MENU VIAFILTER (n·∫øu ch∆∞a m·ªü)
            wait.until(EC.invisibility_of_element_located(
                (By.XPATH, "//img[contains(@src, 'now_waiting')]")
            ))
            via_menu_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, '#viaFilter > a.atHtit'))
            )
            via_menu_button.click()
            wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, "cdk-overlay-backdrop")))
            # 2. CH·ªú N√ì HI·ªÜN RA
            
            
            time.sleep(1)
            # 3. T√åM THEO ATTRIBUTE data-text
            direct_checkbox = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="checkbox"][data-text="Í≤ΩÏú†1Ìöå"]'))
            )
            driver.execute_script("arguments[0].click();", direct_checkbox)
            print('khong co backdrop 1')
            divs = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, "atLstInt")))
            time.sleep(2)
            # Click v√†o th·∫±ng ƒë·∫ßu ti√™n
            divs = driver.find_element(By.CLASS_NAME, "atLstInt")

            if divs:
                try:
                    divs.click()
                    print("‚úÖ ƒê√£ click chuy·∫øn bay ƒë·∫ßu ti√™n")
                    try:
                        noituyendi_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[3]/div/div[1]/div[2]/ul/li[1]/div[2]/span')))
                        
                        noituyendi = noituyendi_element.text
                    except:
                        noituyendi =''
                    if row[5] == "TRUE": 
                        try:    
                            noituyenve_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[3]/div/div[1]/div[4]/ul/li[1]/div[2]/span')))
                            noituyenve = noituyenve_element.text
                        except:
                            noituyenve =''
                    # L·∫•y th·ªùi gian ƒëi
                    timestart = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[2]/ul[1]/li[2]'
                    ))).text

                    # L·∫•y th·ªùi gian v·ªÅ
                    if row[5] == "TRUE": 
                        timeback = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[2]/ul[2]/li[2]'
                    ))).text

                    # L·∫•y gi√° ti·ªÅn
                    pricetext = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[5]/div/strong'
                    ))).text
                    pricetext = to_price(to_value(pricetext))

                    message = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n"+row[0]+"-->"+row[1]+"\n\n ---<b>Vi·ªát Nam AirLine</b>--- " # icon VNA + in ƒë·∫≠m t√™n kh√°ch
                    # In ra cho ch·∫Øc
                    
                    if data[0][5] == "TRUE":
                        message += "üîÅ Kh·ª© H·ªìi\n\n"
                    else:
                        message += "‚û°Ô∏è 1 Chi·ªÅu\n\n"
                    if noituyendi==row[1] and noituyenve==row[0]: 
                        message += "‚úÖ Bay Th·∫≥ng\n\n"

                    else:
                        message += "üß≠ N·ªëi tuy·∫øn\n\n"
                    
                    if noituyendi==row[1]:
                        message +=  row[0] + " --> "+ noituyendi + "  " + timestart +" ng√†y " + cut_year(startdate,simple=True) +"\n"
                    else:
                        message +=  row[0] + " --> "+ noituyendi+ " --> " +row[1] + "  " + timestart +" ng√†y " + cut_year(startdate,simple=True) +"\n"
                    if row[5] == "TRUE":
                        if noituyenve==row[0]: 
                            message += row[1] + " --> "+ noituyenve + "  " + timeback +" ng√†y " + cut_year(backdate,simple=True) +"\n"
                        else:        
                            message += row[1] + " --> "+ noituyenve+ " --> " +row[0] + "  " + timeback +" ng√†y " + cut_year(backdate,simple=True) +"\n"
                    message += "<b>\nGi√° v√© " + pricetext +"</b>"

                    if noituyendi==row[1] and noituyenve==row[0]: 
                        
                        print("kh√¥ng c·∫ßn check bay th·∫≥ng n·ªØa")
                        el = driver.find_element(By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[3]/div')

                        # Scroll t·ªõi element cho ch·∫Øc ƒÉn
                        driver.execute_script("arguments[0].scrollIntoView(true);", el)
                        time.sleep(2)  # ƒë·ª£i n√≥ render ngon l√†nh

                        # Ch·ª•p full page tr∆∞·ªõc
                        driver.save_screenshot("fullVNA.png")

                        # L·∫•y v·ªã tr√≠ & k√≠ch th∆∞·ªõc element
                        
                        send_telegram(message, bot_token=bot_token, chat_id=chat_id, driver=driver,img_path="fullVNA.png")
                        print(message)
                        break
                    print(message)
                except Exception as e:
                    print("‚ùå L·ªói khi click:", e)
            else:
                print("‚ùå H·∫øt chuy·∫øn")
            # 4. CLICK N·∫æU CH∆ØA CH·ªåN
            

            direct_checkbox = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="checkbox"][data-text="ÏßÅÌï≠"]'))
            )
            driver.execute_script("arguments[0].click();", direct_checkbox)
            time.sleep(2)
            print('check v√© v·ªÅ th·∫≥ng')
            try:
                divs = driver.find_element(By.CLASS_NAME, "atLstInt").click()
                print("‚úÖ ƒê√£ click chuy·∫øn bay ƒë·∫ßu ti√™n")
                try:
                    timestart = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[2]/ul[1]/li[2]'
                    ))).text

                    # L·∫•y th·ªùi gian v·ªÅ
                    timeback = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[2]/ul[2]/li[2]'
                    ))).text

                    # L·∫•y gi√° ti·ªÅn
                    pricetext = wait.until(EC.presence_of_element_located((
                        By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[2]/ul/li[5]/div/strong'
                    ))).text
                    pricetext = to_price(to_value(pricetext))

                    
                    el = driver.find_element(By.XPATH, '//*[@id="fareShow"]/li[1]/div/div/div[3]/div')

                    # Scroll t·ªõi element cho ch·∫Øc ƒÉn
                    driver.execute_script("arguments[0].scrollIntoView(true);", el)
                    time.sleep(2)  # ƒë·ª£i n√≥ render ngon l√†nh

                    # Ch·ª•p full page tr∆∞·ªõc
                    driver.save_screenshot("fullVNAvethang.png")

                    # L·∫•y v·ªã tr√≠ & k√≠ch th∆∞·ªõc element
                    messagevethang = "üë§T√™n Kh√°ch: <b> " + data[0][6] + "</b>\n"+row[0]+"-->"+row[1]+"\n\n ---<b>Vi·ªát Nam AirLine</b>--- " # icon VNA + in ƒë·∫≠m t√™n kh√°ch
                    # In ra cho ch·∫Øc
                    if data[0][5] == "TRUE":
                        messagevethang += "üîÅ Kh·ª© H·ªìi\n\n"
                    else:
                        messagevethang += "‚û°Ô∏è 1 Chi·ªÅu\n\n"
                    
                    messagevethang += "‚úÖ Bay Th·∫≥ng\n\n"

                    
                    
                    
                    messagevethang +=  row[0] + " --> "+ row[1] + "  " + timestart +" ng√†y " + cut_year(startdate,simple=True) +"\n"
                    if row[5] == "TRUE":
                        
                        messagevethang += row[1] + " --> "+ row[0] + "  " + timeback +" ng√†y " + cut_year(backdate,simple=True) +"\n"
                        messagevethang += "<b>\nGi√° v√© " + pricetext +"</b>"

                    
                    send_telegram(messagevethang, bot_token=bot_token, chat_id=chat_id, driver=driver,img_path="fullVNAvethang.png")

                except:
                    print('ch∆∞a load xong tuy·∫øn')
            

            except:
                print('kh√¥ng c√≥ v√© v·ªÅ th·∫≥ng > b√°o v√© n·ªëi tuy·∫øn')

                
                send_telegram(message, bot_token=bot_token, chat_id=chat_id, driver=driver,img_path="fullVNA.png")
        except Exception as e:
                print(f" {e}")
            
            
            # 4. Ki·ªÉm tra ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
            
            
    
def checkVNA1chieu(data, spreadsheet_id):
    pass

def check(data, spreadsheet_id):
    """
    H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Sheet
    :param data: D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c t·ª´ sheet
    :param spreadsheet_id: ID c·ªßa spreadsheet
    """
    global bot_token
    global chat_id
    if data and len(data) > 0:
        # T·∫°o n·ªôi dung tin nh·∫Øn
        
        
        # G·ªçi c√°c h√†m x·ª≠ l√Ω d·ªØ li·ªáu
        if data[0][5] == "TRUE":
            print("check 2 chi·ªÅu")
            checkVNA2chieu(data, spreadsheet_id)
        else:
            print("check 1 chi·ªÅu")
            checkVNA1chieu(data, spreadsheet_id)
        
    else:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")
def main():
    # ID c·ªßa spreadsheet
    spreadsheet_id = CONFIG['SPREADSHEET_ID']
    
    print("B·∫Øt ƒë·∫ßu ki·ªÉm tra d·ªØ li·ªáu t·ª´ Google Sheet...")
    print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh")
    
    try:
        # Kh·ªüi t·∫°o ChromeDriver
        global driver
        
        while True:
            driver = setup_chrome_driver()
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ A2:E2
            data = read_sheet(spreadsheet_id, 'H√†ng Ch·ªù VNA!A2:I2')
            if data:
                print("\nC√≥ h√†ng ch·ªù c·∫ßn check VNA")
                for row in data:
                    print(row)
                # G·ªçi h√†m check() ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
                if data[0][5] and data[0][0] and data[0][1]:
                    check(data, spreadsheet_id)
                # Xo√° c√°c √¥ A2, B2, F2 trong Google Sheet
                delete_row_by_range(spreadsheet_id, 'H√†ng Ch·ªù VNA!A2:Z2')
            close_chrome_driver()
            # ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            time.sleep(4000)
            
    except KeyboardInterrupt:
        print("\nƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
        close_chrome_driver()
   

if __name__ == "__main__":
    main() 